using DinksCodeChallenge.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.IO;
using Microsoft.AspNetCore.Http;
using System;
using System.Drawing;
using System.Drawing.Imaging;
using DinksCodeChallenge.Models.ViewModel;
using System.Net.Http;
using System.Net;
using System.Net.Http.Headers;

namespace DinksCodeChallenge.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DinksController : Controller
    {
        private readonly CodeChallengeContext _context ;
        public DinksController(CodeChallengeContext context)
        {
            _context = context;
        }
        //DinkData Columns: DeerID, GeoX, GeoY, DeerDate,
        //DinkPicture Columns: PictureID, Picture, DeerID
        //Template for DINKS querries.////
        [HttpGet("GetAllDinksInformation")]
        public async Task<ActionResult<DinkDataVM>> GetAllInformation() {

            var data_and_photos = new List<DinkDataVM>();
            
            var data = await _context.DinkData.AsQueryable().Where(element => element.DeerId > 0 ).ToListAsync();

            return Ok(data);
        }


        [HttpGet("GetPicture")]
        public FileStreamResult GetPictureInformation([FromQuery] int pictureId)
        {
            var photos = _context.DinkPictures.Where(element => element.PictureId == pictureId).FirstOrDefault();

            // processing the stream.
            var stream = new MemoryStream(photos.Picture);
            return new FileStreamResult(stream, "image/jpeg");
        }



        [HttpPost("CreateDinks")]
        [Consumes("multipart/form-data")]
        public async Task<ActionResult> CreateDinks([FromForm] double geoX, [FromForm] double geoY, [FromForm] DateTime dateNow, [FromForm] List<IFormFile> inputPhotos)
        {
            // Format Date Properly

            DinkData Dink = new DinkData()
            {
                GeoX = geoX,
                GeoY = geoY,
                DeerDate = dateNow,
            };
            _context.DinkData.Add(Dink);
            _context.SaveChanges();

            foreach(IFormFile photo in inputPhotos)
            {
                DinkPictures picture = new DinkPictures();
                picture.DeerId = Dink.DeerId;
                // ORIGINAL METHOD OF CONVERTING IMG TO BYTES //
                // WITHOUT THE USE OF SYSTEM.DRAWING CLASSES  //

                if (photo.ContentType.ToLower().StartsWith("image/"))
                // Check whether the selected file is image
                {
                   
                    byte[] b;
                    using (BinaryReader br = new BinaryReader(photo.OpenReadStream()))
                    {
                        b = br.ReadBytes((int)photo.OpenReadStream().Length);
                        // Convert the image in to bytes
                        picture.Picture = b;
                    }
                    _context.DinkPictures.Add(picture);
                    _context.SaveChanges();
                }

                
            }
            return Ok();
        }

        [HttpDelete("DeleteDinks")]
        public async Task<ActionResult> DeleteDinks([FromQuery] double geoX, [FromQuery] double geoY, [FromQuery] DateTime dateTime, [FromQuery] int deerId)
        {
            // Method one Regular Delete.

            var dinkToRemove = await _context.DinkData.Where(element => element.GeoX == geoX
                                                                            && element.GeoY == geoY
                                                                            && element.DeerId == deerId).FirstAsync();
            var photoToRemove = await _context.DinkPictures.AsQueryable().Where(element => element.DeerId == deerId).ToListAsync();

            foreach(var photo in photoToRemove)
            {
                _context.DinkPictures.Remove(photo);
                _context.SaveChanges();
            }
            // Method two cascade-Delete EF Core
            // var blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();
            _context.DinkData.Remove(dinkToRemove);
            _context.SaveChanges();
            return Ok();
        }

        [HttpPut("UpdateDinks")]
        public async void UpdateDinks([FromForm] double geoX, [FromForm] double geoY, [FromQuery] int DeerId)
        {
            // Method one Regular Delete.
            /* DinkData Dink = new DinkData()
             {
                 GeoX = geoX,
                 GeoY = geoY,
             };*/
            /*var dinkToRemove = await _context.DinkData.AsQueryable().Where(element => element.GeoX == geoX
                                                                            && element.GeoY == geoY
                                                                            && element.DeerId == DeerId).ToListAsync();*/

            // Method two cascade-Delete EF Core
            // var blog = context.Blogs.OrderBy(e => e.Name).Include(e => e.Posts).First();
            var dinkToRemove = _context.DinkData.OrderBy(element => element.GeoX == geoX
                                                    && element.GeoY == geoY
                                                    && element.DeerId == DeerId).Include(element => element.DinkPictures).First();
            _context.Remove(dinkToRemove);
            _context.SaveChanges();
        }

    }
}
